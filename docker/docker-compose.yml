version: '3.7'
services:
  app:
    image: ternandsparrow/s2s-portal:${TAG:-dev}
    build: ..
    container_name: s2s_app
    restart: unless-stopped
    init: true
    environment:
      DBHOST: db
      DBNAME: soils2sat
      DBUSER: postgres
      DBPASS: ${DB_PASS:-password}
      GRAILS_ENV: production
      DISABLE_AUTO_RECOMPILE: 'true'
      TOMCAT_MAX_MEM_MB: 4096
      TOMCAT_MAX_PERM_MB: 512
      VIRTUAL_HOST: ${DOMAIN_NAME}
      # DOI root URL cannot be configured via web UI, it must be done here
      DOI_S2S_ROOT_URL: ${DOI_S2S_ROOT_URL:-http://soils2satellites.org.au}
      # AEKOS services URL value will populate the DB on first run, then you must change them via the web UI
      DEFAULT_AEKOS_SERVICES_URL: ${DEFAULT_AEKOS_SERVICES_URL:-http://s2s-services.aekos.org.au:8080/s2s-services}
    volumes:
      - s2s-extracts:/data/soils2sat/extracts
    healthcheck:
      test: curl -sI localhost:8080/ala-soils2sat | grep -q '302 Found' || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 2
      # yeah, it takes ages to start :'(
      start_period: 5m

  nginxhelper:
    # creates some dynamic location config for nginx
    image: jwilder/nginx-proxy:alpine-0.7.0
    entrypoint: '/entrypoint.sh'
    container_name: s2s_nginx_helper
    environment:
      VIRTUAL_HOST_NAMES: ${DOMAIN_NAME}
      PROXY_HOST: app
      PROXY_PORT: 8080
      PROXY_CONTEXT: ala-soils2sat
    volumes:
      - ./nginx-helper/entrypoint.sh:/entrypoint.sh:ro
      - s2s-nginx-vhostd:/etc/nginx/vhost.d

  db:
    image: postgres:9.4
    container_name: s2s_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: soils2sat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASS:-password}
    volumes:
      - s2s-pgdata:/var/lib/postgresql/data

  extractsbackups3:
    image: silintl/sync-with-s3:1.2.0
    container_name: s2s-extractsbackups3
    restart: unless-stopped
    init: true
    environment:
      ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
      CRON_SCHEDULE: ${EXTRACTS_BACKUP_CRON_SCHEDULE}
      SOURCE_PATH: /data
      DESTINATION_PATH: s3://${AWS_S3_BUCKET}/extracts
      BUCKET_LOCATION: ap-southeast-2
    volumes:
      - s2s-extracts:/data:ro

  pgbackups3:
    image: schickling/postgres-backup-s3
    container_name: s2s-pgbackups3
    restart: unless-stopped
    environment:
      SCHEDULE: ${DB_BACKUP_CRON_SCHEDULE}
      S3_REGION: ap-southeast-2
      S3_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${AWS_S3_BUCKET}
      S3_PREFIX: ${DB_BACKUP_PREFIX}s2s-backup
      POSTGRES_HOST: db
      # these DB details must match the 'db' service
      POSTGRES_DATABASE: soils2sat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASS:-password}
      POSTGRES_EXTRA_OPTS: '--schema=public --blobs'

  nginx-proxy:
    image: jwilder/nginx-proxy:alpine-0.7.0
    ports:
      - "${SSL_EXTERNAL_LISTEN_PORT:-443}:443"
      - "${NONSSL_EXTERNAL_LISTEN_PORT:-80}:80"
    restart: unless-stopped
    container_name: s2s_nginx
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - s2s-nginx-vhostd:/etc/nginx/vhost.d

  autoheal: # thanks https://stackoverflow.com/a/48538213/1410035
    # will restart container with a failing healthcheck
    image: willfarrell/autoheal
    container_name: s2s_autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  s2s-pgdata:
  s2s-extracts:
  s2s-nginx-vhostd:
